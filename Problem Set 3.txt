def radiationExposure(start, stop, step):
    '''
    Computes and returns the amount of radiation exposed
    to between the start and stop times. Calls the 
    function f (defined for you in the grading script)
    to obtain the value of the function at any point.
 
    start: integer, the time at which exposure begins
    stop: integer, the time at which exposure ends
    step: float, the width of each rectangle. You can assume that
      the step size will always partition the space evenly.

    returns: float, the amount of radiation exposed to 
      between start and stop times.
    '''
    # FILL IN YOUR CODE HERE...
    
    def myRange(x, y, step):
        while x < y:
            yield x
            x += step


    totalDose = 0


    # iterate over range in steps, accumulate deadly ionizing radiation, and
    # report the damage

    for x in myRange(start, stop, step):
        d = (f(x) * step)
        totalDose += d

    return totalDose








def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    
    # FILL IN YOUR CODE HERE...
    flag=0
    
    for i in lettersGuessed:
        for j in secretWord:
            if(i==j):
                flag=1
                break
            
        if(flag==1):
            secretWord=secretWord.replace(i,'')
                
                
    if(secretWord==''):
        return True
        
    return False

print isWordGuessed('durian', ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't', 'u'])










def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE...
    s=secretWord
    for i in lettersGuessed:
        for j in secretWord:
            if(i!=j):
                s=s.replace(i,'_ ')
                break
            
        
    

    for i in s:
        if(i!='_'):
            secretWord=secretWord.replace(i,'_')
                           
                
    return secretWord
    
secretWord = 'apple' 
lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']
print getGuessedWord(secretWord, lettersGuessed)








import string


def getAvailableLetters(lettersGuessed):
    '''
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters that represents what letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE...
    s=string.ascii_lowercase
    for i in lettersGuessed:
        if(i in s):
            s=s.replace(i,'')
        
    return s
    
lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']
print getAvailableLetters(lettersGuessed)







import string
 
# 1. Polynomials
def evaluatePoly(poly, x):
    return float(sum(b * (x ** a) for a,b in enumerate(poly)))  
 
# 2. Derivatives
def computeDeriv(poly):
    return [float (a * b) for a, b in enumerate(poly)][1:] or [0.0]
 
# 3. Newton's method
def computeRoot(poly, x_0, epsilon):
    iterations = 0
    evalPoly = evaluatePoly(poly, x_0)
    deriv = computeDeriv(poly)
    while abs(evalPoly) > epsilon:
        x_0 -= (evalPoly / evaluatePoly(deriv, x_0))
        evalPoly = evaluatePoly(poly, x_0)
        iterations += 1
    return [float(x_0), iterations]
 
# 4. a) Is the word guessed?
def isWordGuessed(secretWord, lettersGuessed):
    all(letter in lettersGuessed for letter in secretWord)
 
# 4. b) Printing out the user's guess
def getGuessedWord(secretWord, lettersGuessed):
    return " ".join([letter if letter in lettersGuessed else "_" for letter in secretWord])
 
# 4. c) Printing out all available letters
def getAvailableLetters(lettersGuessed):
    return "".join([letter if letter not in lettersGuessed else "" for letter in string.ascii_lowercase])
 
# 5. Hangman - the game
def hangman(secretWord):
    print("Welcome to the game Hangman!")
    print("I am thinking of a word that is {0:d} letters long".format(len(secretWord)))
    gameOver = False
    guessesLeft = 8
    lettersGuessed = []
    while not gameOver:
        print("-" * 11)
        print("You have {0:d} guesses left".format(guessesLeft))
        availableLetters = getAvailableLetters(lettersGuessed)
        print("Available Letters: {0:s}".format(availableLetters))
        guess = raw_input("Please guess a letter: ")
        guess = guess[0].lower()
        if guess in availableLetters:
            lettersGuessed.append(guess)
            if guess in secretWord:
                response = "Good guess:"
                if isWordGuessed(secretWord, lettersGuessed):
                    gameOver = True
            else:
                guessesLeft -= 1
                response = "Oops! That letter is not in my word:"
                if guessesLeft == 0:
                    gameOver = True
        else:
            response = "Oops! You've already guessed that letter:"
        print("{0:s} {1:s}".format(response, getGuessedWord(secretWord, lettersGuessed)))
    print("-" * 11)
    if isWordGuessed(secretWord, lettersGuessed):
        print("Congratulations, you won!")
    else:
         print("Sorry, you ran out of guesses. The word was {0:s}.".format(secretWord))
         
         






# When your hangman function passes the checks in the previous
# box, paste your function definition here to test it on harder 
# input cases.

import string
 
# 1. Polynomials
def evaluatePoly(poly, x):
    return float(sum(b * (x ** a) for a,b in enumerate(poly)))  
 
# 2. Derivatives
def computeDeriv(poly):
    return [float (a * b) for a, b in enumerate(poly)][1:] or [0.0]
 
# 3. Newton's method
def computeRoot(poly, x_0, epsilon):
    iterations = 0
    evalPoly = evaluatePoly(poly, x_0)
    deriv = computeDeriv(poly)
    while abs(evalPoly) > epsilon:
        x_0 -= (evalPoly / evaluatePoly(deriv, x_0))
        evalPoly = evaluatePoly(poly, x_0)
        iterations += 1
    return [float(x_0), iterations]
 
# 5. Hangman - the game
def hangman(secretWord):
    print("Welcome to the game Hangman!")
    print("I am thinking of a word that is {0:d} letters long".format(len(secretWord)))
    gameOver = False
    guessesLeft = 8
    lettersGuessed = []
    while not gameOver:
        print("-" * 11)
        print("You have {0:d} guesses left".format(guessesLeft))
        availableLetters = getAvailableLetters(lettersGuessed)
        print("Available Letters: {0:s}".format(availableLetters))
        guess = raw_input("Please guess a letter: ")
        guess = guess[0].lower()
        if guess in availableLetters:
            lettersGuessed.append(guess)
            if guess in secretWord:
                response = "Good guess:"
                if isWordGuessed(secretWord, lettersGuessed):
                    gameOver = True
            else:
                guessesLeft -= 1
                response = "Oops! That letter is not in my word:"
                if guessesLeft == 0:
                    gameOver = True
        else:
            response = "Oops! You've already guessed that letter:"
        print("{0:s} {1:s}".format(response, getGuessedWord(secretWord, lettersGuessed)))
    print("-" * 11)
    if isWordGuessed(secretWord, lettersGuessed):
        print("Congratulations, you won!")
    else:
         print("Sorry, you ran out of guesses. The word was {0:s}.".format(secretWord))
         
         